version: 1.2.{build}
build: off

environment:
  global:
    PYLSL_LIB: lsl.dll
  matrix:
    - ID: Ubuntu
      APPVEYOR_BUILD_WORKER_IMAGE: ubuntu2204
      PYTHON: 3.10  # Added Python version
    - ID: macOS
      APPVEYOR_BUILD_WORKER_IMAGE: macOS
      PYTHON: 3.9
    - ID: VS2019_Py311
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PYTHON: "C:\\Python311-x64"
    - ID: VS2019_Py310
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PYTHON: "C:\\Python310-x64"
    - ID: VS2019_Py39
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PYTHON: "C:\\Python39-x64"

matrix:
  fast_finish: true

install:
  - sh: |
      case $APPVEYOR_BUILD_WORKER_IMAGE in
      "ubuntu")
        sudo apt-get update
        sudo apt-get install -y python3-pip
        python3 -m pip install --upgrade pip
        ;;
      "macOS")
        export PATH=$PY:$PY/Scripts:$PATH
        ;;
      esac

  - ps: |
      switch ($env:APPVEYOR_BUILD_WORKER_IMAGE) {
        "Visual Studio 2019" {
          $env:PATH = "$env:PYTHON;$env:PYTHON\Scripts;$env:PATH"
        }
      }

  # Download and unzip liblsl
  - ps: |
      if ($env:APPVEYOR_BUILD_WORKER_IMAGE -match "Visual Studio 2019") {
          Invoke-WebRequest -Uri 'https://github.com/sccn/liblsl/releases/download/v1.16.2/liblsl-1.16.2-Win_amd64.zip' -OutFile 'liblsl.zip'
          Expand-Archive -Path liblsl.zip -DestinationPath liblsl
      }
  - sh: |
      case $APPVEYOR_BUILD_WORKER_IMAGE in
      "ubuntu")
        # Install Miniconda
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        bash miniconda.sh -b -p $HOME/miniconda
        export PATH="$HOME/miniconda/bin:$PATH"
        conda config --set always_yes yes --set changeps1 no
        conda update -q conda
        # Create a new conda environment with the desired Python version
        conda create -q -n test-environment python=$PYTHON
        source activate test-environment
        # Install LSL
        conda install -c conda-forge liblsl
        ;;
      "macOS")
        # Install Brew (if not already installed)
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        # Install LSL
        brew install sccn/labstreaminglayer/lsl
        ;;
      esac
  
 # Move DLL to correct directory (Windows) or Set PYLSL_LIB environment variable (Linux, macOS)
  - ps: |
      if ($env:APPVEYOR_BUILD_WORKER_IMAGE -match "Visual Studio 2019") {
          Move-Item liblsl/bin/lsl.dll $env:PYTHON/Lib/site-packages/
          $env:PYLSL_LIB="$env:PYTHON\Lib\site-packages\lsl.dll"
      }
  #- sh: |
  #    if [[ $APPVEYOR_BUILD_WORKER_IMAGE != "Visual Studio 2019" ]]; then
  #        export PYLSL_LIB=$PWD/liblsl/usr/lib/liblsl64.so.1.16.0  # Update this line
  #    fi

# Install dependencies
  - ps: |
      pip install --upgrade --no-warn-script-location urllib3>=2.0.5
      pip install .
      pip install pytest pytest-timeout ruff
  - sh: |
      python3 -m pip install --upgrade --no-warn-script-location urllib3>=2.0.5
      python3 -m pip install .
      python3 -m pip install pytest pytest-timeout ruff

# Exit if error
  #- ps: if ($LastExitCode -ne 0) { Write-Host "Command exited with code $LastExitCode"; exit $LastExitCode }
  #- sh: if [[ $? != 0 ]]; then echo "Command exited with code $?"; exit $?; fi

test_script:
  # Run tests
  - "echo 'About to run tests...'"
  - sh: |
      if [[ $APPVEYOR_BUILD_WORKER_IMAGE == "ubuntu2204" ]]; then
        echo 'About to run tests on Ubuntu...'
        ls -alh $PWD/liblsl/usr/lib/
        echo $PYLSL_LIB
        which python3
        python3 --version
        ls -alh Tests/
        export PYTEST_ERRORLEVEL=0
        python3 -m pytest -vv Tests/ || PYTEST_ERRORLEVEL=$?
        if [[ $PYTEST_ERRORLEVEL != 0 ]]; then
          echo 'Pytest failed. Terminating python process.'
          pkill -f python3 || echo 'No Python3 process found to terminate.'
        fi
      fi
  - ps: |
      if ($env:APPVEYOR_BUILD_WORKER_IMAGE -ne "ubuntu2204") {
        echo 'About to run tests on non-Ubuntu...'
        $env:PYTEST_ERRORLEVEL=0
        try {
          pytest Tests/
        } catch {
          $env:PYTEST_ERRORLEVEL=$_.Exception.HResult
        }
        if ($env:PYTEST_ERRORLEVEL -ne 0) {
          echo 'Pytest failed. Terminating python process.'
          Stop-Process -Name python -Force
        }
      }

  - "ruff ."
  - "echo 'Finished running tests.'"
  - ps: if ($LastExitCode -ne 0) { Write-Host "Command exited with code $LastExitCode"; exit $LastExitCode }
  - sh: if [[ $? != 0 ]]; then echo "Command exited with code $?"; exit $?; fi
